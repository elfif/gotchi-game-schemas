import { SfaTraits, MappedTraits, SfaWearable } from "types/spirit-force-arena";
import * as g from "types/gotchi";
import { SfaClasses } from "../enums/spirit-force-arena";
export declare function createSpiritForceArenaGotchi(gotchi: g.Gotchi): SpiritForceArenaGotchi;
export declare class SpiritForceArenaGotchi {
    id: string;
    className: SfaClasses;
    traits: SfaTraits;
    mappedTraits: MappedTraits;
    wearables: SfaWearable[];
    meleeWeapon: SfaWearable | null;
    rangedWeapon: SfaWearable | null;
    grenadeWeapon: SfaWearable | null;
    constructor(gotchi: g.Gotchi);
    protected applyWearableModifiersToGameTraits(): void;
    protected applyWearableTrait(wearable: SfaWearable): void;
    protected handleHandsWearables(): void;
    protected getDefaultWeapons(otherWeapon: SfaWearable): SfaWearable;
    protected getMeleeWeapon(): SfaWearable | null;
    protected getRangedWeapon(): SfaWearable | null;
    protected getGrenadeWeapon(): SfaWearable | null;
    protected getWeapon(category: "melee" | "ranged" | "grenade"): SfaWearable | null;
    protected computeMinMaxTraits(): void;
    getHp(): number;
    getAp(): number;
    getAdsView(): number;
    getLuck(): number;
    getStealth(): number;
    getCriticalChance(): number;
    getHpRegen(): number;
    getApRegen(): number;
    getActiveDamageReduction(): number;
    getPassiveDamageReduction(): number;
    getCriticalDamagesMultiplier(): number;
    getMovementSpeed(): number;
    getEvasion(): number;
    getDamageToNpc(): number;
    getMeleeDamage(): number;
    getRangedDamage(): number;
    getGrenadeDamage(): number;
    getFallOff(): number;
    protected getMinMaxValue(value: number | null, min: number, max: number): number;
    protected getGotchiClass(gotchi: g.Gotchi): SfaClasses;
}
